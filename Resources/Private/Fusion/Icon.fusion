prototype(Sitegeist.Stampede:Icon) < prototype(Neos.Fusion:Component) {

    identifier = null
    collection = null
    icon = null

    class = null
    style = 'fill: currentColor; height: 1em;'
    inline = false
    viewBox= '0 0 512 512'

    @private {
        collectionAndIcon = ${props.identifier ? String.split(props.identifier, ':', 2) : [props.collection, props.icon]}
    }

    renderer = Neos.Fusion:Case {
        @if.has = ${private.collectionAndIcon[0] && private.collectionAndIcon[1]}
        sprite {
            condition = ${!props.inline}
            renderer = afx`
                <svg
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    viewBox={props.viewBox}
                    class={props.class}
                    style={props.style}
                >
                    <use>
                        <Neos.Fusion:UriBuilder @path='attributes.xlink:href' package="Sitegeist.Stampede" controller="Svg" action="sprite" arguments={{collection:private.collectionAndIcon[0]}} additionalParams={SitegeistKlarSchiffCacheBuster ? {cb:SitegeistKlarSchiffCacheBuster.get()} : null} section={private.collectionAndIcon[1]} />
                        <Neos.Fusion:UriBuilder @path='attributes.href' package="Sitegeist.Stampede" controller="Svg" action="sprite" arguments={{collection:private.collectionAndIcon[0]}} additionalParams={SitegeistKlarSchiffCacheBuster ? {cb:SitegeistKlarSchiffCacheBuster.get()} : null} section={private.collectionAndIcon[1]} />
                    </use>
                </svg>
            `
        }

        inline {
            condition = true
            renderer = afx`
                <Neos.Fusion:Augmenter
                    class={props.class}
                    style={props.style}
                >
                    {Stampede.icon(private.collectionAndIcon[0], private.collectionAndIcon[1]).svg}
                </Neos.Fusion:Augmenter>
            `
        }
    }
}
